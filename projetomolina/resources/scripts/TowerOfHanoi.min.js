class Disco {
    constructor(a) {
        //Define a div do disco, atribuindo seu id e seu titulo, além de conceder a classe disc.
        this.el = jQuery('<div id="disc-' + a.id + '" title="Disco ' + a.id + '" class="disc"></div>');
        //Definição dos atributos que seram dados ao elemento através do css.
        this.width = a.width;
        this.margin = a.margin;
        this.height = a.height;
        //atribuição de caracteristicas ao elemento via css
        this.el.css({
            width: this.width,
            height: this.height,
            "margin-left": this.margin,
            "margin-right": this.margin,
            "margin-top": 45
        });
        return true;
    }
    getId() {
        return this.id;
    }
    getDisc() {
        return this.el;
    }
}

class Haste {
    constructor(a) {
        //Criação da haste
        this.discs = [];
        this.container = jQuery('<div class="peg-container"></div>');
        this.peg = jQuery('<div class="peg" id="peg-' + (a + 1) + '"></div>');
        this.id = a + 1;
        this.label = jQuery('<div class="peg-label"> </div>');
        this.container.append(this.peg);
        this.container.append(this.label);
        return true;
    }
    top() {
        return this.discs.length > 0 ? this.discs[0] : null;
    }
    //Se houver elementos na haste, insere-se os valores ao inicio da pilha, caso contrário, ele adiciona ao seu fim, logo na primeira posição
    push(a) {
        if (this.discs.length > 0) {
            this.discs.unshift(a);
        }
        else {
            this.discs.push(a);
        }
    }
    //Remove-se o primeiro disco da pilha.
    pop() {
        var a = this.discs.shift();
        return a;
    }
    getPegContainer() {
        return this.container;
    }
    getPeg() {
        return this.peg;
    }
}

var Game=function(b){
    //Inicializa as opções do jogo com o numero de hastes e discos, além de seus tamanhos e a haste destinatária.
    this.options={
        numOfPegs:3,
        numOfDiscs:3,
        container:"#game-container",
        discHeight:100,
        discMaxWidth:200,
        destinationPeg:3
    };
    //Se o numero de hastes for maior do que 7 ou menor que 0, receberá-se o valor default de 3.
    jQuery.extend(this.options,b);
    if(this.options.numOfPegs<0||this.options.numOfPegs>7){
        this.options.numOfPegs=3
    }
    //Se a haste destinatária for a menor ou igual a primeira, ou maior do que o numero de hastes, define-se como a haste destinatária a ultima.
    if(this.options.destinationPeg<=1||this.options.destinationPeg>this.options.numOfPegs){
        this.options.destinationPeg=this.options.numOfPegs
    }
    //
    this.state="init";
    this.result=0;
    var c=this.options;
    this.steps=0;
    this.maxSteps=Math.pow(2,this.options.numOfDiscs)-1;
    this.pegs=[];
    this.container=jQuery(c.container);
    var e=this;
    this.afterStep=this.options.afterStep||function(f){};
    this.afterInit=this.options.afterInit||function(f){};
    this.createPegs();
    var a=this.pegs[0];
    this.createDiscs(a);
    this.state="playing";
    this.afterInit(e)
};

Game.prototype.createPegs=function(){
    for(var a=0;a<this.options.numOfPegs;a++){
        this.pegs[a]=new Haste(a);
        this.container.append(this.pegs[a].getPegContainer());
        this.pegs[a].getPeg().css({
            "min-height":this.options.discHeight*this.options.numOfDiscs
        });
        this._bindDroppableToPeg(this.pegs[a])
    }
    this.pegs[this.options.destinationPeg-1].getPeg().parent().addClass("peg-destination")
};

Game.prototype.createDiscs=function(b){
    for(var e=0;e<this.options.numOfDiscs;e++){
        var c=new Disco({
            id:e+1,
            width:this.options.discMaxWidth-(this.options.numOfDiscs-e)*20,
            height:this.options.discHeight,
            margin:(this.options.numOfDiscs-e)*10,
        });
        this._bindDraggableToDisc(c);
        b.discs.push(c);
        b.getPeg().append(c.getDisc());
        c.getDisc().css("top",e*this.options.discHeight)
    }
    var f=b.getPeg().height();
    for(var e=1;e<this.options.numOfPegs;e++){
        this.pegs[e].getPeg().height(f)
    }
    var a=b.top().getDisc();
    a.draggable("option","disabled",false).addClass("moveable")
};

Game.prototype._bindDroppableToPeg=function(a){
    var c=this;var b=function(i,m){
        var h=m.draggable;
        var g=h.attr("id");
        var n=jQuery(this);
        n=c.getPegById(n.attr("id"));
        var l=n.top()===null?true:false;
        var k=!l?n.top().getDisc().attr("id"):null;
        var f;
        if(!l){
            f=n.getPeg().height()-(n.discs.length+1)*c.options.discHeight
        }else{
            f=(c.options.numOfDiscs-1)*c.options.discHeight
        }
        h.draggable("option","revert",false);
        if(!l&&k<=g){
            h.draggable("option","revert",true);
            return
        }
        var j=c.getPegByDiscId(h.attr("id"));
        n.push(j.pop());
        if(!l){
            n.getPeg().prepend(h);
            h.css("top",f)
        }else{
            n.getPeg().append(h);
            h.css("top",f)
        }
        c.steps++;
        for(p in c.pegs){
            for(d in c.pegs[p].discs){
                c.pegs[p].discs[d].getDisc().draggable("option","disabled",true).removeClass("moveable")
            }
            if(c.pegs[p].top()!==null){
                c.pegs[p].top().getDisc().draggable("option","disabled",false).addClass("moveable")
            }
        }
        c.afterStep(c)
    };
    a.getPeg().droppable({
        hoverClass:"peg-over",
        drop:b
    })
};

Game.prototype._bindDraggableToDisc=function(a){
    a.getDisc().draggable({
        revert:"invalid",
        containment:this.container,
        cursor:"move",
        disabled:true,
        helper:"clone",
        opacity:0.35
    })
};

Game.prototype.getPegById=function(a){
    if(!a){
        return null
    }
    var c=a.substring(4)*1;
    for(var b=0;b<this.pegs.length;b++){
        if(this.pegs[b].id==c){
            return this.pegs[b]
        }
    }
    return null
};

Game.prototype.getPegByDiscId=function(a){
    var c=this.pegs;
    for(p in c){
        var b=c[p].discs;
        for(d in b){
            if(a===b[d].getDisc().attr("id")){
                return c[p]
            }
        }
    }
    return null
};

Game.prototype.getSteps=function(){
    return this.steps
};

Game.prototype.getMaxSteps=function(){
    return this.maxSteps
};

Game.prototype.isWin=function(){
    if(this.state!=="playing"){
        return
    }
    if(this.steps===this.getMaxSteps()){
        var a=this.pegs[this.options.destinationPeg-1];
        if(a.discs.length===this.options.numOfDiscs){
            this.result=1;
            return 1
        }
    }else{
        if(this.steps>=this.getMaxSteps()){
            if(this.result!==1){
                this.result=-1;return -1
            }
            return this.result
        }
    }
    return 0
};

Game.prototype.restart=function(b){
    for(var c=0;c<this.options.numOfPegs;c++){
        var a=this.pegs[c];
        while(a.discs.length>0){
            a.pop()
        }
    }
    this.pegs=[];
    this.container.html("");
    b=b||{};
    jQuery.extend(this.options,b);
    this.createPegs();
    this.createDiscs(this.pegs[0]);
    this.maxSteps=Math.pow(2,this.options.numOfDiscs)-1;
    this.steps=0;
    this.result=0;
    this.state="playing"
};
